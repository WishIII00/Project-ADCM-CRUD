import { useState, useEffect } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import PropTypes from "prop-types";
import LogoADCM from "../../../../assets/Image/Logo-Login.png";

const LoginPage = ({ setIsOpen }) => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [message, setMessage] = useState("");
  const navigate = useNavigate();

  const handleSignUp = () => {
    navigate("/signup"); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
  };

  useEffect(() => {
    const token = sessionStorage.getItem("token");
    const role = sessionStorage.getItem("role");

    console.log("üîé ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Token:", token, "Role:", role);

    if (token && role) {
      navigate(role === "admin" ? "/admin/dashboard" : "/home");
    }
  }, [navigate]);

  const handleLogin = async (e) => {
    e.preventDefault();
    setMessage("");

    try {
      const response = await axios.post("http://localhost:3000/api/auth/login", {
        email,
        password,
      });

      console.log("‚úÖ Response ‡∏à‡∏≤‡∏Å API:", response.data);

      if (response.status === 200) {
        const { token, role } = response.data;  // ‚úÖ ‡∏î‡∏∂‡∏á role ‡∏ï‡∏£‡∏á ‡πÜ ‡∏à‡∏≤‡∏Å response

        if (!token || !role) {
          console.error("‚ùå API ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á token ‡∏´‡∏£‡∏∑‡∏≠ role ‡∏°‡∏≤");
          setMessage("‡πÑ‡∏°‡πà‡∏û‡∏ö token ‡∏´‡∏£‡∏∑‡∏≠ role ‡∏à‡∏≤‡∏Å API");
          return;
        }

        console.log("‚úÖ Token:", token, "Role:", role);

        // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö token ‡πÅ‡∏•‡∏∞ role ‡∏•‡∏á sessionStorage
        sessionStorage.setItem("token", token);
        sessionStorage.setItem("role", role);

        console.log("üì¶ token:", sessionStorage.getItem("token"));
        console.log("üì¶ role:", sessionStorage.getItem("role"));

        setMessage("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");

        // ‚úÖ ‡∏õ‡∏¥‡∏î popup ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á setIsOpen ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
        setIsOpen?.(false);

        // ‚úÖ Redirect ‡∏ï‡∏≤‡∏° role
        navigate(role === "admin" ? "/admin/dashboard" : "/home");

      } else {
        setMessage("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
      }
    } catch (error) {
      console.error("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error.response?.data?.message || error.message);
      setMessage(error.response?.data?.message || "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
    }
 
  };

  return (
    <div className="min-h-screen bg-gray-200 flex items-center justify-center">
      <div className="w-full max-w-md p-6 bg-white rounded-lg shadow-lg">
        <div className="flex justify-center mb-6">
          <img src={LogoADCM} alt="Logo" className="w-40 h-40 object-contain" />
        </div>

        <h2 className="text-2xl font-bold text-center mb-4">‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</h2>

        <form onSubmit={handleLogin} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700">‡∏≠‡∏µ‡πÄ‡∏°‡∏•</label>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
              className="mt-1 block w-full p-3 border border-gray-300 rounded-lg focus:ring-blue-500"
              placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              className="mt-1 block w-full p-3 border border-gray-300 rounded-lg focus:ring-blue-500"
              placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
            />
          </div>

          {message && (
            <p className={`text-center text-sm font-medium ${message === "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" ? "text-green-500" : "text-red-500"}`}>
              {message}
            </p>
          )}

          <button
            type="submit"
            className="w-full py-3 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition-all"
          >
            ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
          </button>
        </form>
        {/* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å */}
        <div className="mt-4 text-center">
          <p className="text-sm text-gray-600">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ?</p>
          <button
            onClick={handleSignUp}
            className="text-red-500 hover:text-red-700 text-sm font-semibold mt-2"
          >
            ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
          </button>
        </div>
      </div>
    </div>
  );
};

LoginPage.propTypes = {
  setIsOpen: PropTypes.func, // ‚úÖ ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏™‡πà‡∏á prop ‡∏ô‡∏µ‡πâ
};

export default LoginPage;
